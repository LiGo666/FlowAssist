networks:
  app-network:

services:
  nextjs:
    build:
      context: ./nextjs-app
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/nextjs_db?schema=public
    volumes:
      - ./nextjs-app:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - db
    env_file:
      - .env
    networks:
      - app-network
    restart: unless-stopped

  mcp:
    build:
      context: ./mcp-server
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    volumes:
      - ./mcp-server:/app
      - /app/dist
    networks:
      - app-network
    restart: unless-stopped

  n8n-import:
    image: n8nio/n8n:latest
    hostname: n8n-import
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/demo-data/credentials && n8n import:workflow --separate --input=/demo-data/workflows"
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=db
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=postgres
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_PERSONALIZATION_ENABLED=false
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:-super-secret-key}
      - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET:-even-more-secret}
      - OLLAMA_HOST=ollama:11434
    env_file:
      - .env
    networks:
      - app-network
    depends_on:
      - db

  n8n:
    image: n8nio/n8n:latest
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=password
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - NODE_ENV=production
      - WEBHOOK_URL=http://${N8N_HOST:-localhost}:5678/
      - EXECUTIONS_PROCESS=main
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=db
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=postgres
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_PERSONALIZATION_ENABLED=false
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:-super-secret-key}
      - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET:-even-more-secret}
      - N8N_DEFAULT_BINARY_DATA_MODE=filesystem
      - OLLAMA_HOST=ollama:11434
    volumes:
      - ./n8n/.n8n:/home/node/.n8n
      - ./n8n/demo-data:/demo-data
      - ./shared:/data/shared
    networks:
      - app-network
    depends_on:
      - db
      - n8n-import
    restart: unless-stopped

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ./ollama-data:/root/.ollama
    networks:
      - app-network

  ollama-pull-llama:
    image: ollama/ollama:latest
    container_name: ollama-pull-llama
    volumes:
      - ./ollama-data:/root/.ollama
    entrypoint: /bin/sh
    environment:
      - OLLAMA_HOST=ollama:11434
    command:
      - "-c"
      - "sleep 3; ollama pull llama3.2"
    networks:
      - app-network
    depends_on:
      - ollama

  qdrant:
    image: qdrant/qdrant
    hostname: qdrant
    container_name: qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
    volumes:
      - ./qdrant-data:/qdrant/storage
    networks:
      - app-network

  db:
    image: postgres:15-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=nextjs_db
    volumes:
      - ./pgdata:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - app-network
      
  redpanda:
    image: redpandadata/redpanda:latest
    container_name: redpanda
    restart: unless-stopped
    ports:
      - "9092:9092" # Kafka API
      - "9644:9644" # Redpanda Admin
    environment:
      - REDPANDA_RPC_SERVER_LISTEN_ADDR=0.0.0.0
      - REDPANDA_KAFKA_ADDRESS=0.0.0.0:9092
    command:
      - redpanda
      - start
      - --smp=1
      - --memory=1G
      - --reserve-memory=0M
      - --overprovisioned
      - --node-id=0
      - --check=false
      - --kafka-addr=0.0.0.0:9092
      - --advertise-kafka-addr=redpanda:9092
      - --rpc-addr=0.0.0.0:33145
      - --advertise-rpc-addr=redpanda:33145
    networks:
      - app-network

  analytics-service:
    build:
      context: ./analytics-service
      dockerfile: Dockerfile
    container_name: analytics-service
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./analytics-service:/app
      - ./shared:/data/shared
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=nextjs_db
      - KAFKA_BOOTSTRAP_SERVERS=redpanda:9092
      - TELEMETRY_TOPIC=telemetry
      - FEEDBACK_TOPIC=feedback
    depends_on:
      - db
      - redpanda
    networks:
      - app-network
      
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - db
    networks:
      - app-network

volumes:
  pgdata:
